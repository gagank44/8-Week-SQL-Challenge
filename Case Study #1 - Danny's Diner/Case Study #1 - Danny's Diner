# üçú Case Study #1: Danny's Diner 
<img src="https://user-images.githubusercontent.com/81607668/127727503-9d9e7a25-93cb-4f95-8bd0-20b87cb4b459.png" alt="Image" width="500" height="520">

## üìö Table of Contents
- [Business Task](#business-task)
- [Entity Relationship Diagram](#entity-relationship-diagram)
- [Question and Solution](#question-and-solution)

Please note that all the information regarding the case study has been sourced from the following link: [here](https://8weeksqlchallenge.com/case-study-1/). 

***

## Business Task
Danny wants to use the data to answer a few simple questions about his customers, especially about their visiting patterns, how much money they‚Äôve spent and also which menu items are their favourite. 

***

## Entity Relationship Diagram

![image](https://user-images.githubusercontent.com/81607668/127271130-dca9aedd-4ca9-4ed8-b6ec-1e1920dca4a8.png)

***

## Question and Solution

 1.What is the total amount each customer spent at the restaurant?
SELECT 
  sales.customer_id, 
  SUM(menu.price) AS total_sales
FROM sales
INNER JOIN menu
  ON sales.product_id = menu.product_id
GROUP BY sales.customer_id
ORDER BY sales.customer_id ASC;  
  
 2.2. How many days has each customer visited the restaurant?
SELECT 
  customer_id, 
  COUNT(DISTINCT order_date) AS visit_count
FROM sales
GROUP BY customer_id;

3 What was the first item from the menu purchased by each customer?
with cte as
(
select s.customer_id,m.product_name,
ROW_NUMBER() over (PARTITION by s.customer_id order by s.order_date) as rownumber
from sales s 
join  menu m on
m.product_id=s.product_id)
select customer_id,product_name
from cte
where rownumber=1;

4. What is the most purchased item on the menu and how many times was it purchased by all customers?

select m.product_name,count(m.product_name) as pro_count
from sales s 
join  menu m on
m.product_id=s.product_id
group by m.product_name
order by pro_count desc
limit 1;


5. Which item was the most popular for each customer?
with cte as
(select m.product_name,s.customer_id,count(*) as ord_count,
dense_rank() over (PARTITION by s.customer_id order by count(*) desc) as rownumber
from menu m
join sales s on
m.product_id=s.product_id
GROUP by s.customer_id,m.product_name)
select product_name,customer_id
from cte
where rownumber=1


6. Which item was purchased first by the customer after they became a member?
with cte as
(
select m.product_name,mem.customer_id,mem.join_date,s.order_date,
dense_rank() over(PARTITION by mem.customer_id order by s.order_date) as rn
from menu m
join sales s on
m.product_id=s.product_id
join  members mem on
mem.customer_id=s.customer_id
where s.order_date>mem.join_date)
select distinct(customer_id),product_name
from cte
where rn=1


7. Which item was purchased just before the customer became a member?
with cte as
(
select m.product_name,mem.customer_id,mem.join_date,s.order_date,
dense_rank() over(PARTITION by mem.customer_id order by s.order_date desc) as rn
from menu m
join sales s on
m.product_id=s.product_id
join  members mem on
mem.customer_id=s.customer_id
where s.order_date<mem.join_date)
select customer_id,product_name
from cte
where rn=1

8. What is the total items and amount spent for each member before they became a member?

select s.customer_id,count(m.product_name) as tot_products,sum(m.price )
from menu m
join sales s
on m.product_id=s.product_id
join members mem on
mem.customer_id=s.customer_id
where order_date<join_date
group by s.customer_id

9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier 
‚Äî how many points would each customer have?

WITH cte AS (
    SELECT 
        s.customer_id,
        m.product_id,
        m.price,
        CASE
            WHEN m.product_name = 'sushi' THEN m.price * 10 * 2
            ELSE m.price * 10
        END AS points
    FROM 
        menu m
    JOIN 
        sales s ON m.product_id = s.product_id
)
SELECT 
    customer_id,
    product_id,
    SUM(points) AS tot_points
FROM 
    cte
GROUP BY 
    customer_id, product_id;

10. In the first week after a customer joins the program (including their join date) 
they earn 2x points on all items, not just sushi ‚Äî
 how many points do customer A and B have at the end of January?
 
SELECT 
    s.customer_id,
    s.order_date,
    m.product_name,
    m.price,
    mem.join_date,
    CASE
        WHEN s.order_date BETWEEN mem.join_date AND DATE(mem.join_date, '+7 days') THEN m.price * 10 * 2
        WHEN m.product_name = 'sushi' THEN m.price * 10 * 2
        ELSE m.price * 10
    END AS points
FROM 
    menu m
JOIN 
    sales s ON m.product_id = s.product_id
JOIN 
    members mem ON mem.customer_id = s.customer_id;
WHERE order_date<'2021-02-01'
 
BONUS QUESTION:
SELECT 
  sales.customer_id, 
  sales.order_date,  
  menu.product_name, 
  menu.price,
  CASE
    WHEN members.join_date > sales.order_date THEN 'N'
    WHEN members.join_date <= sales.order_date THEN 'Y'
    ELSE 'N' END AS member_status
FROM sales
JOIN members
  ON sales.customer_id = members.customer_id
INNER JOIN menu
  ON sales.product_id = menu.product_id
ORDER BY members.customer_id, sales.order_date

BONUS QUESION:
Danny also requires further information about the ranking of customer products,
 but he purposely does not need the ranking for non-member purchases
 so he expects null ranking values for the records when customers are not yet part of the loyalty program.

WITH cte AS (
  SELECT 
    sales.customer_id, 
    sales.order_date,  
    menu.product_name, 
    menu.price,
    CASE
      WHEN members.join_date > sales.order_date THEN 'N'
      WHEN members.join_date <= sales.order_date THEN 'Y'
      ELSE 'N' 
    END AS member_status
  FROM 
    sales
  JOIN 
    members ON sales.customer_id = members.customer_id
  JOIN 
    menu ON sales.product_id = menu.product_id
  ORDER BY 
    members.customer_id, sales.order_date
)
SELECT 
  *, 
  CASE
    WHEN member_status = 'N' THEN NULL
    ELSE RANK() OVER (
      PARTITION BY customer_id, member_status
      ORDER BY order_date
    ) 
  END AS ranking
FROM 
  cte;
